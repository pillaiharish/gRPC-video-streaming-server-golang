// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: video_stream.proto

package videostream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	VideoStream_StreamVideo_FullMethodName = "/videostream.VideoStream/StreamVideo"
)

// VideoStreamClient is the client API for VideoStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoStreamClient interface {
	StreamVideo(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (VideoStream_StreamVideoClient, error)
}

type videoStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoStreamClient(cc grpc.ClientConnInterface) VideoStreamClient {
	return &videoStreamClient{cc}
}

func (c *videoStreamClient) StreamVideo(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (VideoStream_StreamVideoClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VideoStream_ServiceDesc.Streams[0], VideoStream_StreamVideo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &videoStreamStreamVideoClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VideoStream_StreamVideoClient interface {
	Recv() (*VideoResponse, error)
	grpc.ClientStream
}

type videoStreamStreamVideoClient struct {
	grpc.ClientStream
}

func (x *videoStreamStreamVideoClient) Recv() (*VideoResponse, error) {
	m := new(VideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoStreamServer is the server API for VideoStream service.
// All implementations must embed UnimplementedVideoStreamServer
// for forward compatibility
type VideoStreamServer interface {
	StreamVideo(*VideoRequest, VideoStream_StreamVideoServer) error
	mustEmbedUnimplementedVideoStreamServer()
}

// UnimplementedVideoStreamServer must be embedded to have forward compatible implementations.
type UnimplementedVideoStreamServer struct {
}

func (UnimplementedVideoStreamServer) StreamVideo(*VideoRequest, VideoStream_StreamVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamVideo not implemented")
}
func (UnimplementedVideoStreamServer) mustEmbedUnimplementedVideoStreamServer() {}

// UnsafeVideoStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoStreamServer will
// result in compilation errors.
type UnsafeVideoStreamServer interface {
	mustEmbedUnimplementedVideoStreamServer()
}

func RegisterVideoStreamServer(s grpc.ServiceRegistrar, srv VideoStreamServer) {
	s.RegisterService(&VideoStream_ServiceDesc, srv)
}

func _VideoStream_StreamVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VideoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VideoStreamServer).StreamVideo(m, &videoStreamStreamVideoServer{ServerStream: stream})
}

type VideoStream_StreamVideoServer interface {
	Send(*VideoResponse) error
	grpc.ServerStream
}

type videoStreamStreamVideoServer struct {
	grpc.ServerStream
}

func (x *videoStreamStreamVideoServer) Send(m *VideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

// VideoStream_ServiceDesc is the grpc.ServiceDesc for VideoStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videostream.VideoStream",
	HandlerType: (*VideoStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamVideo",
			Handler:       _VideoStream_StreamVideo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "video_stream.proto",
}
